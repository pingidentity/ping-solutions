- name: WF Create App Get Signing Cert
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/keys'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
  register: key_info
  retries: 2

- name: WF Create App Get Signing Key
  set_fact:
    #need to do _embedded['keys']" because keys is a reserved word in ansible.
    signing_key: "{{ key_info.json._embedded['keys'] |
                  selectattr('usageType', 'match', 'SIGNING') |
                  map(attribute='id') |
                  list | first }}"

- name: Read Sample groups in PingOne Read all Groups in PingOne
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/groups'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
    return_content: yes
  register: read_groups
  retries: 2

- name: Create Sample groups in PingOne List Groups by name in PingOne
  set_fact:
    list_groups: "{{read_groups.json._embedded.groups | map(attribute='name') | list}} }}"

- name: Create Sample groups in PingOne Get the Single_factor_Group ID
  set_fact:
    single_factor_id: "{{read_groups.json._embedded.groups | selectattr('name','match','Single_Factor_Group') | map(attribute='id') | list | first }}"
  when: '"Single_Factor_Group" in list_groups'

- name: Create Sample groups in PingOne Get the Multi_factor_Group ID
  set_fact:
    multi_factor_id: "{{read_groups.json._embedded.groups | selectattr('name','match','Multi_Factor_Group') | map(attribute='id') | list | first }}"
  when: '"Multi_Factor_Group" in list_groups'

- name: WF Create App Get Applications
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
  register: app_info
  retries: 2

- name: WF Create App Filter Application List
  set_fact:
    app_list: "{{ app_info.json._embedded.applications |
              selectattr('spEntityId', 'defined') |
              map(attribute='spEntityId') }}"

- name: WF Create Demo Single Factor App
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
          "name": "Demo App - Single-Factor",
          "description": "This is a sample app used to demonstrate a Single-Factor authentication policy, using an Idp-Initiated SAML connection to a Ping Identity demo Service Provider application.",
          "enabled": true,
          "type": "WEB_APP",
          "protocol": "SAML",
          "accessControl": {
            "group": {
            "type": "ANY_GROUP",
            "groups": [
              {
              "id": "{{ single_factor_id }}"
              }
            ]
            }
          },
          "spEntityId": "demo_sf_app",
          "responseSigned": false,
          "sloBinding": "HTTP_POST",
          "acsUrls": [
          "https://decoder.pingidentity.cloud/saml"
          ],
          "assertionDuration": 60,
          "assertionSigned": true,
          "idpSigning": {
              "key": {
                  "id": "{{ signing_key }}"
              },
              "algorithm": "SHA256withRSA"
          }
      }
    body_format: json
    status_code: 201
  when: '"demo_sf_app" not in app_list'

- name: WF Create Demo Multi Factor App
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
          "name": "Demo App - Multi-Factor",
          "description": "This is a sample app used to demonstrate a Multi-Factor authentication policy in PingFederate, using an Idp-Initiated SAML connection to a Ping Identity demo Service Provider application.",
          "enabled": true,
          "type": "WEB_APP",
          "protocol": "SAML",
          "accessControl": {
            "group": {
            "type": "ANY_GROUP",
            "groups": [
              {
              "id": "{{ multi_factor_id }}"
              }
            ]
            }
          },
          "spEntityId": "demo_mfa_app",
          "responseSigned": false,
          "sloBinding": "HTTP_POST",
          "acsUrls": [
          "https://decoder.pingidentity.cloud/saml"
          ],
          "assertionDuration": 60,
          "assertionSigned": true,
          "idpSigning": {
              "key": {
                  "id": "{{ signing_key }}"
              },
              "algorithm": "SHA256withRSA"
          }
      }
    body_format: json
    status_code: 201
  when: '"demo_mfa_app" not in app_list'

- name: WF Create Demo MFA CIDR App
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
          "name": "Demo App - MFA when Outside CIDR Range",
          "description": "This is a sample app used to requires a user to multi-factor authenticate if they are outside a given CIDR range. Users can also reset their own password, even when using Active Directory as the user store. All by using an Idp-Initiated SAML connection to a Ping Identity demo Service Provider application.",
          "enabled": true,
          "type": "WEB_APP",
          "protocol": "SAML",
          "spEntityId": "demo_mfa_cidr_app",
          "responseSigned": false,
          "sloBinding": "HTTP_POST",
          "acsUrls": [
          "https://decoder.pingidentity.cloud/saml"
          ],
          "assertionDuration": 60,
          "assertionSigned": true,
          "idpSigning": {
              "key": {
                  "id": "{{ signing_key }}"
              },
              "algorithm": "SHA256withRSA"
          }
      }
    body_format: json
    status_code: 201
  when: '"demo_mfa_cont_app" not in app_list'

- name: WF Create Demo Multi Factor Contractor App
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
          "name": "Demo App - MFA Contractors Only",
          "description": "This is a sample app used to demonstrate a MFA authentication policy for a demo population, using an Idp-Initiated SAML connection to a Ping Identity demo Service Provider application.",
          "enabled": true,
          "type": "WEB_APP",
          "protocol": "SAML",
          "spEntityId": "demo_mfa_cont_app",
          "responseSigned": false,
          "sloBinding": "HTTP_POST",
          "acsUrls": [
          "https://decoder.pingidentity.cloud/saml"
          ],
          "assertionDuration": 60,
          "assertionSigned": true,
          "idpSigning": {
              "key": {
                  "id": "{{ signing_key }}"
              },
              "algorithm": "SHA256withRSA"
          }
      }
    body_format: json
    status_code: 201
  when: '"demo_mfa_cont_app" not in app_list'

- name: WF App Get Applications (Again)
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
  register: app_info_recheck
  retries: 2

- name: WF Demo Filter App List
  set_fact:
    demo_sf_app_id: "{{ app_info_recheck.json._embedded.applications |
                      selectattr('spEntityId', 'defined') |
                      selectattr('spEntityId', 'match', 'demo_sf_app') |
                      map(attribute='id') | list | first }}"
    demo_mfa_app_id: "{{ app_info_recheck.json._embedded.applications |
                      selectattr('spEntityId', 'defined') |
                      selectattr('spEntityId', 'match', 'demo_mfa_app') |
                      map(attribute='id') | list | first }}"
    demo_mfa_cidr_app_id: "{{ app_info_recheck.json._embedded.applications |
                      selectattr('spEntityId', 'defined') |
                      selectattr('spEntityId', 'match', 'demo_mfa_cidr_app') |
                      map(attribute='id') | list | first }}"
    demo_mfa_cont_app_id: "{{ app_info_recheck.json._embedded.applications |
                      selectattr('spEntityId', 'defined') |
                      selectattr('spEntityId', 'match', 'demo_mfa_cont_app') |
                      map(attribute='id') | list | first }}"

- name: WF Demo Get List of Authorization Policies
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/signOnPolicies'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
    validate_certs: true
  register: policy_check
  retries: 2

- name: WF Demo MFA Filter Authorization Policy ID
  set_fact:
    sf_auth_pol_id: "{{ policy_check.json._embedded.signOnPolicies |
                    selectattr('name', 'match', 'Single_Factor') |
                    map(attribute='id') | list | first }}"
    mfa_auth_pol_id: "{{ policy_check.json._embedded.signOnPolicies |
                    selectattr('name', 'match', 'Multi_Factor') |
                    map(attribute='id') | list | first }}"
    demo_cidr_auth_pol_id: "{{ policy_check.json._embedded.signOnPolicies |
                    selectattr('name', 'match', 'Demo_CIDR_With_Self-Service_Password_Reset') |
                    map(attribute='id') | list | first }}"
    demo_contractor_auth_pol_id: "{{ policy_check.json._embedded.signOnPolicies |
                    selectattr('name', 'match', 'Demo_MFA_Contractors_Only') |
                    map(attribute='id') | list | first }}"

- name: WF Demo SF App Info
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_sf_app_id }}/signOnPolicyAssignments'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
  register: sf_app_sop_info
  retries: 2

- name: WF Demo SF App Check if SOP Exists
  set_fact:
    check_sf_sop: "{{ sf_app_sop_info.json._embedded.signOnPolicyAssignments |
                map(attribute='priority') | list }}"

- name: WF Create Demo SF App SOP
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_sf_app_id }}/signOnPolicyAssignments'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
        "priority": 1,
        "signOnPolicy": {
          "id": "{{ sf_auth_pol_id }}"
        }
      }
    body_format: json
    status_code: 201
  when: '1 not in check_sf_sop'

- name: WF Demo MFA App Info
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_mfa_app_id }}/signOnPolicyAssignments'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
  register: mfa_app_sop_info
  retries: 2

- name: WF Demo SF App Check if SOP Exists
  set_fact:
    check_mfa_sop: "{{ mfa_app_sop_info.json._embedded.signOnPolicyAssignments |
                map(attribute='priority') | list }}"

- name: WF Create Demo MFA App SOP
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_mfa_app_id }}/signOnPolicyAssignments'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
        "priority": 1,
        "signOnPolicy": {
          "id": "{{ mfa_auth_pol_id }}"
        }
      }
    body_format: json
    status_code: 201
  when: '1 not in check_mfa_sop'

- name: WF Demo CIDR App Info
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_mfa_cidr_app_id }}/signOnPolicyAssignments'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
  register: mfa_app_sop_info
  retries: 2

- name: WF Demo CIDR App Check if SOP Exists
  set_fact:
    check_cidr_sop: "{{ mfa_app_sop_info.json._embedded.signOnPolicyAssignments |
                map(attribute='priority') | list }}"

- name: WF Create Demo CIDR App SOP
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_mfa_cidr_app_id }}/signOnPolicyAssignments'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
        "priority": 1,
        "signOnPolicy": {
          "id": "{{ demo_cidr_auth_pol_id }}"
        }
      }
    body_format: json
    status_code: 201
  when: '1 not in check_cidr_sop'

- name: WF Demo MFA Contractor App Info
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_mfa_cont_app_id }}/signOnPolicyAssignments'
    method: GET
    headers:
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    status_code: 200
  register: cont_mfa_app_sop_info
  retries: 2

- name: WF Demo MFA Contractor App Check if SOP Exists
  set_fact:
    check_cont_mfa_sop: "{{ cont_mfa_app_sop_info.json._embedded.signOnPolicyAssignments |
                map(attribute='priority') | list }}"

- name: WF Create Demo MFA Contractor App SOP
  uri:
    url: '{{ API_LOCATION }}/environments/{{ ENV_ID }}/applications/{{ demo_mfa_cont_app_id }}/signOnPolicyAssignments'
    method: POST
    headers:
      content-type: 'application/json'
      Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'
    body: >
      {
        "priority": 1,
        "signOnPolicy": {
          "id": "{{ demo_contractor_auth_pol_id }}"
        }
      }
    body_format: json
    status_code: 201
  when: '1 not in check_cont_mfa_sop'