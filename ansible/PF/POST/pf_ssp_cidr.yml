# Get the List of all data stores currently in PingFederate  
- name: PF Self Service PWD Reset and CIDR Check if Data store exists
  uri: 
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/dataStores'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: GET
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body_format: json
    status_code: 200
    return_content: yes
    validate_certs: no
  register: check_ds
  retries: 2

# List of all data stores by name
- name: PF Self Service PWD Reset and CIDR List all Data stores
  set_fact:
    LIST_DS: "{{check_ds.json['items'] | map(attribute='name') | list}}"

# Create LDAP data store if  Demo LDAP data store not retruned by LIST_DS
- name: PF Self Service PWD Reset and CIDR Create LDAP DataStore
  uri:
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/dataStores'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: POST
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body: >
        {
        "type": "LDAP",
        "name": "Demo LDAP Data Store",
        "useSsl":true,
        "hostnames" : ["0.0.0.0"],
        "userDN": "example_ldap_username",
        "password": "example_ldap_password"
        }
    body_format: json
    status_code: 201
    validate_certs: no
  register: create_ds
  retries: 2
  when: '"Demo LDAP Data Store" not in LIST_DS or LIST_DS is not defined'

# Get DataStore ID and name from create_ds task
- name: PF Self Service PWD Reset and CIDR Get the Data Store ID and name from the created DataStore
  set_fact:
    DS_ID: "{{ create_ds.json.id}}"
    DS_NAME: "{{ create_ds.json.name}}"
  when: '"Demo LDAP Data Store" not in LIST_DS or LIST_DS is not defined'

# Get DataStore ID and name from the list returned during the check_ds
- name: PF Self Serv PWD Reset and CIDR Get the Data Store ID and name from the Data store list returned
  set_fact:
    DS_ID: "{{ check_ds.json['items'] | selectattr('name','match','Demo LDAP Data Store') | map(attribute='id') | list | first }}"
    DS_NAME: "{{ check_ds.json['items'] | selectattr('name','match','Demo LDAP Data Store') | map(attribute='name') | list | first }}"
  when: '"Demo LDAP Data Store" in LIST_DS'

# Get the List of all PCV's currently in PingFederate  
- name: PF Self Service PWD Reset and CIDR Check if LDAP password credential validator with the same name exists
  uri: 
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/passwordCredentialValidators'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: GET
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body_format: json
    status_code: 200
    validate_certs: no
    return_content: yes
  register: check_pcv
  retries: 2

# List of all PCV's by name
- name: PF Self Service PWD Reset and CIDR List all Password credential validators
  set_fact:
    LIST_PCV: "{{check_pcv.json['items'] | map(attribute='name') | list}}"

#Create LDAP PCV if the DemoPCV not returned by LIST_PCV
- name: PF Self Service PWD Reset and CIDR Create LDAP Password credential Validator
  uri:
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/passwordCredentialValidators'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: POST
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body: >
        {
          "id": "DemoID",
          "name": "DemoPCV",
          "pluginDescriptorRef": {
              "id": "org.sourceid.saml20.domain.LDAPUsernamePasswordCredentialValidator",
              "location": "https://{{PINGFED_BASE_URL}}/pf-admin-api/v1/passwordCredentialValidators/descriptors/org.sourceid.saml20.domain.LDAPUsernamePasswordCredentialValidator"
          },
          "configuration": {
              "fields": [
              {
                  "name": "LDAP Datastore",
                  "value": "{{DS_ID}}"
              },
              {
                  "name": "Search Base",
                  "value": "dc=example,dc=com"
              },
              {
                  "name": "Search Filter",
                  "value": "sAMAccountName=${username}"
              }
              ]
          }
          }
    body_format: json
    status_code: 201
    validate_certs: no
  register: create_pcv
  retries: 2
  when: '"DemoPCV" not in LIST_PCV or LIST_PCV is not defined'

# Get PCV_ID and name from  create_pcv task
- name: PF Self Service PWD Reset and CIDR Get the PCV ID and name from the created Password credential Validator
  set_fact:
    PCV_ID: "{{ create_pcv.json.id }}"
    PCV_NAME: "{{ create_pcv.json.name}}"
  when: '"DemoPCV" not in LIST_PCV or LIST_PCV is not defined'

# Get PCV_ID and name from the list returned during the check_pcv
- name: PF Self Service PWD Reset and CIDR Get the PCV ID and name from the returned list
  set_fact:
    PCV_ID: "{{ check_pcv.json['items'] | selectattr('name','match','DemoPCV') | map(attribute='id') | list | first }}"
    PCV_NAME: "{{ check_pcv.json['items'] | selectattr('name','match','DemoPCV') | map(attribute='name') | list | first }}"
  when: '"DemoPCV" in LIST_PCV'
  
# Get the List of all Notification Publisher currently in PingFederate
- name: PF Self Service PWD Reset and CIDR Check if Notification Publisher with the same name exists
  uri: 
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/notificationPublishers'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: GET
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body_format: json
    status_code: 200
    validate_certs: no
    return_content: yes
  register: check_np
  retries: 2

# List all NP's by name
- name: PF Self Service PWD Reset and CIDR List all Notification Publisher
  set_fact:
    LIST_NP: "{{check_np.json['items'] | map(attribute='name') | list}}"

# Create NP if DemoSMTP is not returned by LIST_NP
- name: PF Self Service PWD Reset and CIDR Create Notification Publisher
  uri:
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/notificationPublishers'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: POST
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body: >
        {
        "id": "DemoSMTP",
        "name": "DemoSMTP",
        "pluginDescriptorRef": {
        "id": "com.pingidentity.email.SmtpNotificationPlugin"
        },
            "configuration": {
                "fields": [
                {
                    "name": "From Address",
                    "value": "noreply@any-company.org"
                },
                {
                    "name": "Email Server",
                    "value": "0.0.0.0"
                },
                {
                    "name": "Test Address",
                    "value": "testuser@gmail.com"
                }
                ]
            }
        }
    body_format: json
    status_code: 201
    validate_certs: no
  register: create_np
  retries: 2
  when: '"DemoSMTP" not in LIST_NP or LIST_NP is not defined'

# Get NP_ID and name from create_np task
- name: PF Self Service PWD Reset and CIDR Get the Notification Publisher ID from the created NP
  set_fact:
    NP_ID: "{{ create_np.json.id}}"
    NP_NAME: "{{ create_np.json.name}}"
  when: '"DemoSMTP" not in LIST_NP or LIST_NP is not defined'

# Get NP_ID and name from check_np task
- name: PF Self Service PWD Reset and CIDR Get the Notification Publisher ID from the returned list
  set_fact:
    NP_ID: "{{ check_np.json['items'] | selectattr('name','match', 'DemoSMTP') | map(attribute='id') | list | first }}"
    NP_NAME: "{{ check_np.json['items'] | selectattr('name','match','DemoSMTP') |map(attribute='name') | list | first }}"
  when: '"DemoSMTP" in LIST_NP'

# Get the list of all adapters in PingFederate 
- name: PF Self Service PWD Reset and CIDR Check if HTML form adapter with the same name exists
  uri: 
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/idp/adapters'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: GET
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body_format: json
    status_code: 200
    validate_certs: no
    return_content: yes
  register: check_adap
  retries: 2

# List all adapters by name
- name: PF Self Service PWD Reset and CIDR List all adapters
  set_fact:
    LIST_ADAPTER: "{{check_adap.json['items'] | map(attribute='name') | list}}"

# Create HTML form adapter if SampleHTMLform is not retruned by LIST_ADAPTER
- name: PF Self Service PWD Reset and CIDR 'Create HTML form adapter'
  uri:
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/idp/adapters'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: POST
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body: >
        {
              "id": "HtmlformDemo",
              "name": "SampleHtmlForm",
              "pluginDescriptorRef": {
                  "id": "com.pingidentity.adapters.htmlform.idp.HtmlFormIdpAuthnAdapter"
              },
              "configuration": {
                  "tables": [
                  {
                      "name": "Credential Validators",
                      "rows": [
                      {
                          "fields": [
                          {
                              "name": "Password Credential Validator Instance",
                              "value": "{{PCV_ID}}"
                          }
                          ]
                      }
                      ]
                  }
                  ],
                  "fields": [
                      {
                          "name": "Allow Password Changes",
                          "value": "true"
                      },
                      {
                          "name": "Password Reset Type",
                          "value": "OTL"
                      },
                      {
                          "name": "Notification Publisher",
                          "value": "{{NP_ID}}"
                      }
                  ]
              },
              "attributeContract": {
                      "coreAttributes": [
                      {
                          "name": "username",
                          "masked": false,
                          "pseudonym": true
                      }
                      ]
              }
              }
    body_format: json
    status_code: 201
    validate_certs: no
  register: create_html_adap
  retries: 2
  when: '"SampleHtmlForm" not in LIST_ADAPTER or LIST_ADAPTER is not defined'

# Get the HTMLform adapter id and name from create_html_adap variable
- name: PF Self Service PWD Reset and CIDR Get the HTMLform adapter from the created adapter instance
  set_fact:
    HTMLFORM_ID: "{{ create_html_adap.json.id}}"
    HTMLFORM_NAME: "{{ create_html_adap.json.name}}"
  when: '"SampleHtmlForm" not in LIST_ADAPTER or LIST_ADAPTER is not defined'

# Get the HTMLform  adapter id and name from check_adap variable
- name: PF Self Service PWD Reset and CIDR Get the HTMLform adapter from the returned list
  set_fact:
    HTMLFORM_ID: "{{ check_adap.json['items'] | selectattr('name','match','SampleHtmlForm') | map(attribute='id') | list | first }}"
    HTMLFORM_NAME: "{{ check_adap.json['items'] | selectattr('name','match','SampleHtmlForm') | map(attribute='name') | list | first }}"
  when: '"SampleHtmlForm" in LIST_ADAPTER'

# Get the list of all CIDR selectors returned by PingFederate
- name: PF Self Service PWD Reset and CIDR Get the list of CIDR Selectors
  uri: 
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/authenticationSelectors'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: GET
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body_format: json
    status_code: 200
    validate_certs: no
    return_content: yes
  register: check_cidr
  retries: 2

# List all the CIDR selectors returned by name
- name: PF Self Service PWD Reset and CIDR List the CIDR Selectors configured by name
  set_fact:
    LIST_CIDR: "{{check_cidr.json['items'] | map(attribute='name') | list}}"

# Create CIDR selectors if CIDRdemo is not returned by LIST_CIDR
- name: PF Self Service PWD Reset and CIDR Create CIDR Selector
  uri:
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/authenticationSelectors'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: POST
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body: >
          {
            "id": "CIDRid",
            "name": "CIDRdemo",
            "pluginDescriptorRef": {
              "id": "com.pingidentity.pf.selectors.cidr.CIDRAdapterSelector"
            },
            "configuration": {
              "tables": [
                {
                  "name": "Networks",
                  "rows": [
                    {
                      "fields": [
                        {
                          "name": "Network Range (CIDR notation)",
                          "value": "0.0.0.0./0"
                        }
                      ]
                    }
                  ]
                }
              ]
            } 
          }
    body_format: json
    status_code: 201
    validate_certs: no
    return_content: yes
  register: create_cidr
  retries: 2
  when: '"CIDRdemo" not in LIST_CIDR or LIST_CIDR is not defined'

# Get the CIDR_ID and name from the create_cidr variable
- name: PF Self Service PWD Reset and CIDR Get the CIDR ID from the created CIDR instance
  set_fact:
    CIDR_ID: "{{ create_cidr.json.id}}"
    CIDR_NAME: "{{ create_cidr.json.name}}"
  when: '"CIDRdemo" not in LIST_CIDR or LIST_CIDR is not defined'

# Get the CIDR ID and name from the checK_cidr variable
- name: PF Self Service PWD Reset and CIDR Get the CIDR ID from the returned list
  set_fact:
    CIDR_ID: "{{ check_cidr.json['items'] | selectattr('name','match', 'CIDRdemo') | map(attribute='id') | list | first }}"
    CIDR_NAME: "{{ check_cidr.json['items'] | selectattr('name','match','CIDRdemo') |map(attribute='name') | list | first }}"
  when: '"CIDRdemo" in LIST_CIDR'

# Get the deployment list from PingOne
- name: PF Self Service PWD Reset and CIDR Get the Deployment list
  uri:
    url: '{{API_LOCATION}}/organizations/{{ORG_ID}}/deployments'
    method: GET
    headers:
        Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'   
        content-type: text/plain
    status_code: 200
    return_content: yes
    validate_certs: no
  register: deployment_id
  retries: 2

# Get the PingID deployment ID from the list
- name: PF Self Service PWD Reset and CIDR Get the PingID deployment ID
  set_fact:
    DEPLOY_ID: "{{ deployment_id.json._embedded.deployments | selectattr('deploymentType','match', 'PING_ENTERPRISE') | map(attribute='id') | list | first }}"

# Get the PingID properties file form PingOne
- name: PF Self Service PWD Reset and CIDR Get the PingId properties file
  uri:
    url: '{{API_LOCATION}}/organizations/{{ORG_ID}}/deployments/{{DEPLOY_ID}}/pingIdSettings'
    method: GET
    headers:
        Authorization: 'Bearer {{ WORKER_APP_ACCESS_TOKEN }}'   
        content-type: text/plain
    status_code: 200
    return_content: yes
    validate_certs: no
  register: pingid_properties
  retries: 2
  
# Base64 envode the values of PingId properties file for uploading into Ping Federate
- name: PF Self Service PWD Reset and CIDR Base64 encode the Values in PingID properties file
  set_fact:
    PINGID_PROP: "{{pingid_properties.content | b64encode}}"

# Using the check_adap variable from the GET call used to retrun the list of adapter configured on PingFederate
- name: PF Self Service PWD Reset and CIDR List the Adapters configured by name
  set_fact:
    LIST_ADAPTER: "{{check_adap.json['items'] | map(attribute='name') | list}}"

# Create PingID adapter if SamplePingID adapter is not returned by LIST_ADAPTER
- name: PF Self Service PWD Reset and CIDR Create PingID adapter
  uri:
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/idp/adapters'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: POST
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body: >
        {
          "id": "PingIDdemo",
          "name": "SamplePingID",
          "pluginDescriptorRef": {
            "id": "com.pingidentity.adapters.pingid.PingIDAdapter"
          },
          "configuration": {
          "tables": [],
          "fields": [
              {
                "name": "PingID Properties",
                "value": "{{PINGID_PROP}}"           
              }
            ]
          },
          "attributeContract": {
            "coreAttributes": [
              {
                "name": "subject",
                "masked": false,
                "pseudonym": true
              }         
            ]       
          }
        }
    body_format: json
    status_code: 201
    validate_certs: no
    return_content: yes
  register: create_pingid_adap
  retries: 2
  when: '"SamplePingID" not in LIST_ADAPTER or LIST_ADAPTER is not defined'

# Get the PingID adapter and name from create_pingid_adap variable
- name: PF Self Service PWD Reset and CIDR Get the PingID adapter from the created adapter instance
  set_fact:
    PINGID_ID: "{{ create_pingid_adap.json.id}}"
    PINGID_NAME: "{{ create_pingid_adap.json.name}}"
  when: '"SamplePingID" not in LIST_ADAPTER or LIST_ADAPTER is not defined'

# Get the PingID adapter and name from check_adap variable
- name: PF Self Service PWD Reset and CIDR Get the PingID adapter from the returned list
  set_fact:
    PINGID_ID: "{{ check_adap.json['items'] | selectattr('name','match', 'SamplePingID') | map(attribute='id') | list | first }}"
    PINGID_NAME: "{{ check_adap.json['items'] | selectattr('name','match','SamplePingID') |map(attribute='name') | list | first }}"
  when: '"SamplePingID" in LIST_ADAPTER'

# Get the List of all Authentication Policy returned by Ping Federate
- name: PF Self Service PWD Reset and CIDR Get the list of Authentication Policies
  uri: 
    url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/authenticationPolicies/default'
    user: "{{PF_USERNAME}}"
    password: "{{PF_PASSWORD}}"
    force_basic_auth: yes
    method: GET
    headers:
      X-XSRF-Header: PASS
      content-type: application/json
      X-BypassExternalValidation: true
    body_format: json
    status_code: 200
    validate_certs: no
    return_content: yes
  register: check_authn_policy
  retries: 2

# List all authentication Policy by name
- name: PF Self Service PWD Reset and CIDR List the Policies configured by name
  set_fact:
    LIST_POL: "{{check_authn_policy.json['authnSelectionTrees'] | map(attribute='name') | list}}"

# Create Authentication Policy if  CIDR Demo policy not returned by PingFederate
- name: PF Self Service PWD Reset and CIDR Create Authentication Policy
  uri:
      url: '{{PINGFED_BASE_URL}}/pf-admin-api/v1/authenticationPolicies/default'
      user: "{{PF_USERNAME}}"
      password: "{{PF_PASSWORD}}"
      force_basic_auth: yes
      method: PUT
      headers:
        X-XSRF-Header: PASS
        content-type: application/json
        X-BypassExternalValidation: true
      body: >
            {
              "failIfNoSelection": true,
              "authnSelectionTrees": [
                {
                  "rootNode": {
                    "action": {
                      "type": "AUTHN_SELECTOR",
                      "authenticationSelectorRef": {
                        "id": "{{CIDR_ID}}"
                      }
                    },
                    "children": [
                      {
                        "action": {
                          "type": "AUTHN_SOURCE",
                          "context": "No",
                          "authenticationSource": {
                            "type": "IDP_ADAPTER",
                            "sourceRef": {
                              "id": "{{HTMLFORM_ID}}",
                              "location": "{{PINGFED_BASE_URL}}:9999/pf-admin-api/v1/idp/adapters/HtmlformDemo"
                            }
                          }
                        },
                        "children": [
                          {
                            "action": {
                              "type": "DONE",
                              "context": "Fail"
                            }
                          },
                          {
                            "action": {
                              "type": "AUTHN_SOURCE",
                              "context": "Success",
                              "authenticationSource": {
                                "type": "IDP_ADAPTER",
                                "sourceRef": {
                                  "id": "{{PINGID_ID}}",
                                  "location": "{{PINGFED_BASE_URL}}:9999/pf-admin-api/v1/idp/adapters/PingIDdemo"
                                }
                              },
                              "inputUserIdMapping": {
                                "source": {
                                  "type": "ADAPTER",
                                  "id": "{{HTMLFORM_ID}}"
                                },
                                "value": "username"
                              }
                            },
                            "children": [
                              {
                                "action": {
                                  "type": "DONE",
                                  "context": "Fail"
                                }
                              },
                              {
                                "action": {
                                  "type": "DONE",
                                  "context": "Success"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "action": {
                          "type": "AUTHN_SOURCE",
                          "context": "Yes",
                          "authenticationSource": {
                            "type": "IDP_ADAPTER",
                            "sourceRef": {
                              "id": "{{HTMLFORM_ID}}",
                              "location": "{{PINGFED_BASE_URL}}:9999/pf-admin-api/v1/idp/adapters/HtmlformDemo"
                            }
                          }
                        },
                        "children": [
                          {
                            "action": {
                              "type": "DONE",
                              "context": "Fail"
                            }
                          },
                          {
                            "action": {
                              "type": "DONE",
                              "context": "Success"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "name": "CIDR Demo Policy",
                  "enabled": true
                }
              ],
              "defaultAuthenticationSources": [],
              "trackedHttpParameters": []
            }
      body_format: json
      status_code: 200
      validate_certs: no
  register: create_authn_policy
  retries: 2
  when: '"CIDR Demo Policy" not in LIST_POL or LIST_POL is not defined'